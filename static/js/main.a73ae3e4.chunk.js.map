{"version":3,"sources":["components/ContactForm.js","firebase.js","components/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["ContactForm","props","initialFieldValues","fullName","mobile","email","description","useState","values","setValues","useEffect","currentId","contactObjects","handleInputChange","event","target","name","value","autoComplete","onSubmit","preventDefault","addOrEdit","className","placeholder","onChange","required","type","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","fireDb","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","Contacts","setContactObjects","setCurrentId","firebaseDb","child","on","snapshot","val","Fragment","style","fontSize","obj","push","err","console","log","set","overflow","Object","keys","map","key","onClick","window","confirm","remove","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a73ae3e4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst ContactForm = (props) => {\r\n\r\n    const initialFieldValues = {\r\n        fullName: '',\r\n        mobile: '',\r\n        email: '',\r\n        description: ''\r\n    }\r\n\r\n    var [values, setValues] = useState(initialFieldValues)\r\n\r\n    useEffect(() => {\r\n        if (props.currentId == '') {\r\n            setValues({ ...initialFieldValues })\r\n        } else {\r\n            setValues({ ...props.contactObjects[props.currentId] })\r\n        }\r\n    }, [props.currentId, props.contactObjects])\r\n\r\n    const handleInputChange = event => {\r\n        var { name, value } = event.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleFormSubmit = event => {\r\n        event.preventDefault()\r\n        props.addOrEdit(values)\r\n    }\r\n\r\n    return (\r\n        <form autoComplete='off' onSubmit={handleFormSubmit}>\r\n            <div className='form-group input-group'>\r\n                <div className='input-group-prepend'>\r\n                    <div className='input-group-text'>\r\n                        <i className='fas fa-user'></i>\r\n                    </div>\r\n                </div>\r\n                <input className='form-control' placeholder='Full Name' name='fullName' value={values.fullName} onChange={handleInputChange} required></input>\r\n            </div>\r\n            <div className='form-row'>\r\n                <div className='form-group input-group col-md-6'>\r\n                    <div className='input-group-prepend'>\r\n                        <div className='input-group-text'>\r\n                            <i className='fas fa-mobile-alt'></i>\r\n                        </div>\r\n                    </div>\r\n                    <input className='form-control' placeholder='Mobile' name='mobile' value={values.mobile} onChange={handleInputChange} required></input>\r\n                </div>\r\n                <div className='form-group input-group col-md-6'>\r\n                    <div className='input-group-prepend'>\r\n                        <div className='input-group-text'>\r\n                            <i className='fas fa-envelope'></i>\r\n                        </div>\r\n                    </div>\r\n                    <input className='form-control' placeholder='Email' name='email' value={values.email} onChange={handleInputChange} required></input>\r\n                </div>\r\n            </div>\r\n            <div className='form-row flex-nowrap justify-content-between'>\r\n                <legend className=\"col-form-label col-sm-2 pt-0\">Gender</legend>\r\n                <div className='col-md-3'>\r\n                    <div className='form-check'>\r\n                        <input className='form-check-input' type='radio' value=\"male\" name='radio'/>\r\n                        <label className='form-check-label'>Male</label>\r\n                    </div>\r\n                    <div className='form-check'>\r\n                        <input className='form-check-input' type='radio' value=\"female\" name='radio'/>\r\n                        <label className='form-check-label'>Female</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"dropdown\">\r\n                    <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        Skills  </button>\r\n\r\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                        <a className=\"dropdown-item\">UI</a>\r\n                        <a className=\"dropdown-item\">UX</a>\r\n                        <a className=\"dropdown-item\">Backend</a>\r\n                        <a className=\"dropdown-item\">Css</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='form-group'>\r\n                <textarea className='form-control' placeholder='Description' name='description' value={values.description} onChange={handleInputChange} required></textarea>\r\n            </div>\r\n            <div className='form-group'>\r\n                <input type='submit' value={props.currentId == '' ? \"Save\" : \"Update\"} className='btn btn-primary btn-block'></input>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ContactForm","import * as firebase from 'firebase'\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAicEzjZPaTqiZf8YWsvFIKRcWAVHBGdMY\",\r\n    authDomain: \"react-crud-8b6a1.firebaseapp.com\",\r\n    databaseURL: \"https://react-crud-8b6a1.firebaseio.com\",\r\n    projectId: \"react-crud-8b6a1\",\r\n    storageBucket: \"react-crud-8b6a1.appspot.com\",\r\n    messagingSenderId: \"614057926030\",\r\n    appId: \"1:614057926030:web:cfd8856a9335d98838d8df\"\r\n};\r\n// Initialize Firebase\r\nvar fireDb = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default fireDb.database().ref()\r\n\r\n// Install\r\n// npm i -s firebase\r\n// npm i firebase","import React, { useState, useEffect } from 'react'\r\nimport ContactForm from './ContactForm'\r\nimport firebaseDb from '../firebase'\r\n\r\nconst Contacts = () => {\r\n\r\n    var [contactObjects, setContactObjects] = useState({})\r\n    var [currentId, setCurrentId] = useState('')\r\n\r\n    useEffect(() => {\r\n        firebaseDb.child('contacts').on('value', snapshot => {\r\n            if (snapshot.val() != null) {\r\n                setContactObjects({\r\n                    ...snapshot.val()\r\n                })\r\n            }\r\n            else {\r\n                setContactObjects({})\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const addOrEdit = obj => {\r\n\r\n        if (currentId == '') {\r\n            firebaseDb.child('contacts').push(\r\n                obj,\r\n                err => {\r\n                    if (err) {\r\n                        console.log(err)\r\n                    } else\r\n                        setCurrentId('')\r\n                }\r\n            )\r\n        } else {\r\n            firebaseDb.child(`contacts/${currentId}`).set(\r\n                obj,\r\n                err => {\r\n                    if (err) {\r\n                        console.log(err)\r\n                    } else\r\n                        setCurrentId('')\r\n                }\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const onDelete = key => {\r\n        if (window.confirm('Are you sure to delete this record?')) {\r\n            firebaseDb.child(`contacts/${key}`).remove(\r\n                err => {\r\n                    if (err)\r\n                        console.log(err)\r\n                    else\r\n                        setCurrentId('')\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"jumbotron jumbotron-fluid\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-6 text-center\" style={{ fontSize: 'inherit' }}>Assignment_Socialrect.com</h1>\r\n                </div>\r\n            </div>\r\n            <div className='row justify-content-between'>\r\n                <div className='col-md-7'>\r\n                    <ContactForm {...({ addOrEdit: addOrEdit, currentId, contactObjects })} />\r\n                </div>\r\n                <div className='col-md-5' style={{ overflow: 'auto' }}>\r\n                    <table className='table table-borderless table-stripped'>\r\n                        <thead className='thead-light'>\r\n                            <tr>\r\n                                <th>Full Name</th>\r\n                                <th>Mobile</th>\r\n                                <th>Email</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                Object.keys(contactObjects).map(id => {\r\n                                    return <tr key={id}>\r\n                                        <td>{contactObjects[id].fullName}</td>\r\n                                        <td>{contactObjects[id].mobile}</td>\r\n                                        <td>{contactObjects[id].email}</td>\r\n                                        <td>\r\n                                            <a className='btn text-primary' onClick={() => { setCurrentId(id) }}>\r\n                                                <i className='fas fa-pencil-alt'></i>\r\n                                            </a>\r\n                                            <a className='btn text-danger' onClick={() => onDelete(id)}>\r\n                                                <i className='fas fa-trash-alt'></i>\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Contacts","import React from 'react';\nimport './App.css';\nimport Contacts from './components/Contacts';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className='col-md-8 offset-md-2'>\n        <Contacts />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}